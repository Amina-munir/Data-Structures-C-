//Stack Implementation using Linked List
#include<iostream>
using namespace std;
class Node 
{
  public:
  int data;
  Node * next;

   Node( int data)
   {
    this->data = data;
    next = NULL;
   }
 };

class Stack 
{
    Node * head;
    int size;
public:
  Stack() 
  {
    head = NULL;
    size = 0 ;
  }
  int stacksize()
  {
  	return size;
  }

  bool isEmpty() 
  {
    if (head == NULL)
	{
      return true;
    } 
	else
	{
       return false;
    }
  }
  

  int push( int value)
   {
   	Node * newNode = new Node(value);
   	if( newNode == NULL)
   {
   	cout<<"Stack is full"<<endl;
   }
   else 
   {
   	newNode->data = value;
    newNode->next = head;
    head = newNode;
    size++;
   }
   return value;
 }


  int pop() 
  {
  	int x = head->data;
  	Node *temp=head;
  	head = temp->next;
  	delete temp;
  	size--;
  	return x;
  }
  int peek()
   {
    //Node *temp = NULL;
    if (isEmpty())
	 {
      cout << "stack underflow" << endl;
      return 0;
    } 
	else 
	{
      return head->data;
    }
  }

  
  void display()
{
   	if(head == NULL)
   {
   	cout<<"Stack is empty"<<endl;
   }
   else
   {
   	cout << "All values in the Stack are :" << endl;
    Node * temp = head;
    while (temp != NULL)
     	{
      cout << temp -> data <<" ";
      temp = temp -> next;
        }
   }
}
};

int main()
{
  Stack s1;
  int option, data;

  do 
  {
    cout << "Select Option number. Enter 0 to exit." << endl;
    cout << "1. Push()" << endl;
    cout << "2. Pop()" << endl;
    cout << "3. isEmpty()" << endl;
    cout << "4. peek()" << endl;
    cout << "5. Stacksize()" << endl;
    cout << "6. display()" << endl;
    cin >> option;

    switch (option) 
	{
		
    case 0:
      break;
    case 1:
      cout << "Enter VALUE to push in the stack" <<endl;
      cin >> data;
  
      s1.push(data);
      break;
    case 2:
      cout << " Poped Value is : " << endl;
      s1.pop();
     
      break;
    case 3:
      if (s1.isEmpty())
        cout << "Stack is Empty" << endl;
      else
        cout << "Stack is not Empty" << endl;
      break;
    case 4:
      if (s1.isEmpty()) 
	  {
        cout << "Stack is Empty" << endl;
      } 
	  else
	  {
        cout << "TOP of Stack is: "<<  s1.peek();
          cout<< endl;
      }
      break;
      case 5:
      cout << "Stack size is  : " << s1.stacksize() << endl;
      break;
    case 6:
      cout << "Display Function Called - " << endl;
      s1.display();
      cout << endl;
      break;
    default:
      cout << "Enter Proper Option number " << endl;
    }
  } while (option != 0);

  return 0;
}
